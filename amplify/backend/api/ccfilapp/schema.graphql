type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  username: String
  email: String
  Referrals: [Referrals] @manyToMany(relationName: "UserReferrals")
  FeatureFeedback: [FeatureFeedback] @manyToMany(relationName: "UserFeatureFeedback")
  title: String
  bio: String
  firstName: String
  lastName: String
  isLeader: Boolean
  featurePosition: Int
  Headshot: Headshot @hasOne
  link: String
}

type Referrals @model @auth(rules: [{allow: public}]) {
  id: ID!
  date: AWSDate
  source: String
  name: String
  followUp: String
  currentResident: Boolean
  DOADate: AWSDate
  reasonForDecline: String
  howDidYouHearAboutUs: String
  assistanceProvided: String
  notes: [Note] @hasMany
  users: [User] @manyToMany(relationName: "UserReferrals")
}

type Note @model @auth(rules: [{allow: public}]) {
  id: ID!
  date: AWSDate
  author: String
  text: String
}

type Icon @model @auth(rules: [{allow: public}]) {
  id: ID!
  alt: String
  src: String
}

type Services @model @auth(rules: [{allow: public}]) {
  id: ID!
  serviceTitle: String
  serviceBodyText: String
  Icon: Icon @hasOne
}

type TeamMember @model @auth(rules: [{allow: public}]) {
  id: ID!
  firstName: String!
  lastName: String
  bio: String
  link: String
  title: String
  Image: Headshot @hasOne
  isLeader: Boolean
  featurePosition: Int!
}

type Headshot @model @auth(rules: [{allow: public}]) {
  id: ID!
  src: String!
  alt: String!
  imageTitle: String
}

type FeatureFeedback @model @auth(rules: [{allow: public}]) {
  id: ID!
  date: AWSDate
  layoutDesign: String
  functionality: String
  formFields: String
  featureRequest: String
  other: String
  isComplete: Boolean
  users: [User] @manyToMany(relationName: "UserFeatureFeedback")
}
 